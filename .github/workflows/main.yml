name: FWCloud-Agent CI

on:
  push:
    branches: [main, devel]

jobs:
  checks:
    name: Checks
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.rustversion.outputs.rustversion }}
    steps:
      - uses: actions/checkout@v2
      - run: cargo check
      - run: cargo pkgid
      - run: 'echo "$(cargo pkgid | cut -d# -f2)"'
      - id: rustversion
        run: 'echo "::set-output name=rustversion::$(cargo pkgid | cut -d# -f2)"'

  security_audit:
    needs: checks
    name: Security audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  test:
    needs: checks
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test

  fmt:
    needs: checks
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    needs: checks
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: clippy
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: -- -D warnings

  coverage:
    needs: checks
    name: Code coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@v0.1
        with:
          args: '--ignore-tests'

  build:
    needs: [security_audit, test, fmt, clippy, coverage]
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: cargo build

  #deb-package:
  #  needs: [build]
  #  runs-on: ubuntu-latest
  #  name: DEB package
  #  steps:
  #  - uses: actions/checkout@v2
  #  - name: Build DEB package
  #    uses: sassman/rust-deb-builder@v1
  #  - name: Upload package
  #    uses: actions/upload-artifact@v2
  #    with:
  #      name: ubuntu-amd64
  #      path: ./target/x86_64-unknown-linux-musl/debian/*

  deb-package:
    needs: [build]
    runs-on: ubuntu-latest
    name: DEB package
    steps:
      - uses: actions/checkout@v2
      - name: Install required packages
        run: sudo apt install -y curl libssl-dev pkg-config gcc
      - name: Install rustup
        run: curl https://sh.rustup.rs -sSf | sh -s -- -y && source "$HOME/.cargo/env"
      - name: Install cargo-deb
        run: cargo install cargo-deb
      - name: Build DEB package
        run: cargo deb --verbose --target=x86_64-unknown-linux-gnu
      - name: Upload package
        uses: actions/upload-artifact@v2
        with:
          name: deb-package
          path: ./target/x86_64-unknown-linux-gnu/debian/*

  rpm-package:
    needs: [build]
    runs-on: ubuntu-latest
    name: RPM package
    steps:
      - uses: actions/checkout@v2
      - name: Install required packages
        run: sudo apt install -y curl rpm libssl-dev pkg-config gcc
      - name: Install rustup
        run: curl https://sh.rustup.rs -sSf | sh -s -- -y && source "$HOME/.cargo/env"
      - name: Install cargo-rpm
        run: cargo install cargo-rpm
      - name: Build RPM package
        run: cargo rpm build -v
      - name: Upload RPM Artifact
        uses: actions/upload-artifact@v2
        with:
          name: rpm-package
          path: ./target/release/rpmbuild/RPMS/x86_64/*

  # raspbian-armv7:
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   name: Raspbian armv7
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Build package
  #     id: debbuild
  #     uses: ebbflow-io/cargo-deb-armv7-debian@1.0
  #   - name: Upload package
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: raspbian
  #       path: ./target/armv7-unknown-linux-musleabihf/debian/*

  upload-to-fwcloud:
    needs: [deb-package, rpm-package]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    name: FWCloud upload
    steps:
      - uses: actions/checkout@v2
      - name: Download packages
        uses: actions/download-artifact@v2
      - name: List packages
        run: ls -lha 
      - name: Upload DEB package
        uses: SamKirkland/FTP-Deploy-Action@4.0.0
        with:
          server: ${{ secrets.FWCLOUD_PKG_FTP_HOST }}
          username: ${{ secrets.FWCLOUD_PKG_FTP_USERNAME }}
          password: ${{ secrets.FWCLOUD_PKG_FTP_PASSWORD }}
          local-dir: ./deb-package/
          server-dir: ./fwcloud-agent/deb/
      - name: Upload RPM package
        uses: SamKirkland/FTP-Deploy-Action@4.0.0
        with:
          server: ${{ secrets.FWCLOUD_PKG_FTP_HOST }}
          username: ${{ secrets.FWCLOUD_PKG_FTP_USERNAME }}
          password: ${{ secrets.FWCLOUD_PKG_FTP_PASSWORD }}
          local-dir: ./rpm-package/
          server-dir: ./fwcloud-agent/rpm/

  deb-upload-to-packagecloud:
    needs: [deb-package]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    name: DEB to Packagecloud
    strategy:
      matrix:
        dist: [ubuntu/bionic, ubuntu/jammy, ubuntu/focal, debian/jessie, debian/bullseye, debian/buster]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: ${{ matrix.dist }}
        uses: danielmundi/upload-packagecloud@v1
        with:
          PACKAGE-NAME: ./deb-package/*.deb
          PACKAGECLOUD-USERNAME: ${{ secrets.PACKAGECLOUD_USERNAME }}
          PACKAGECLOUD-REPO: FWCloud
          PACKAGECLOUD-DISTRIB: ${{ matrix.dist }}
          PACKAGECLOUD-TOKEN: ${{ secrets.PACKAGECLOUD_PASSWORD }}

  rpm-upload-to-packagecloud:
    needs: [deb-package, rpm-package]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    name: RPM to Packagecloud
    strategy:
      matrix:
        dist: [ol/7, ol/8, el/7, el/7, fedora/35, fedora/36]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: ${{ matrix.dist }}
        uses: danielmundi/upload-packagecloud@v1
        with:
          PACKAGE-NAME: ./rpm-package/*.rpm
          PACKAGECLOUD-USERNAME: ${{ secrets.PACKAGECLOUD_USERNAME }}
          PACKAGECLOUD-REPO: FWCloud
          PACKAGECLOUD-DISTRIB: ${{ matrix.dist }}
          PACKAGECLOUD-TOKEN: ${{ secrets.PACKAGECLOUD_PASSWORD }}